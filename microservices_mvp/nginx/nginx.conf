worker_processes 1;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format (opsional, tapi berguna untuk debugging)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Rate Limiting: Zona untuk menyimpan status IP, 10m bisa menampung sekitar 160,000 alamat IP
    # rate=10r/s berarti 10 permintaan per detik
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    server {
        listen 80;
        server_name localhost; # Atau domain Anda jika ada

        # Lokasi untuk Auth Service
        location /auth/ {
            # Rate Limiting
            limit_req zone=mylimit burst=20 nodelay; # burst=20 berarti antrian hingga 20 req, nodelay berarti langsung tolak jika melebihi
            limit_req_log_level warn; # Mencatat permintaan yang dibatasi/ditunda sebagai warning
            limit_req_status 429; # Kode status HTTP untuk Too Many Requests

            proxy_pass http://auth_service:8003/; # Nama service dan port dari docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Menghapus prefix /auth/ sebelum meneruskan
            # proxy_rewrite ^/auth/(.*)$ /$1 break; # Tidak diperlukan jika FastAPI di auth_service diatur untuk menangani /auth/*
        }

        # Lokasi untuk User Service
        location /users/ {
            # Rate Limiting
            limit_req zone=mylimit burst=20 nodelay;
            limit_req_log_level warn;
            limit_req_status 429;

            proxy_pass http://user_service:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Lokasi untuk Product Service
        location /products/ {
            # Rate Limiting
            limit_req zone=mylimit burst=20 nodelay;
            limit_req_log_level warn;
            limit_req_status 429;

            proxy_pass http://product_service:8001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Lokasi untuk Order Service
        location /orders/ {
            # Rate Limiting
            limit_req zone=mylimit burst=20 nodelay;
            limit_req_log_level warn;
            limit_req_status 429;

            proxy_pass http://order_service:8002/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Frontend Application (React)
        # This location block should handle all other requests.
        location / {
            # Rate Limiting for frontend (opsional, bisa berbeda dari API)
            # Contoh: limit_req zone=mylimit burst=50 nodelay;
            # limit_req_log_level warn;
            # limit_req_status 429;

            proxy_pass http://frontend_react_app:80; # Nama layanan frontend di docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade; # Untuk WebSocket jika aplikasi React menggunakannya (misalnya HMR)
            proxy_set_header Connection "upgrade";   # Untuk WebSocket
            proxy_http_version 1.1;
        }
    }
}
